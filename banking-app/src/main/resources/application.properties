spring.application.name=banking-app

# URL de connexion à la base de données MySQL
# jdbc:mysql:// indique que nous utilisons le driver JDBC pour MySQL.
# localhost est l'adresse du serveur MySQL, 3306 est le port par défaut de MySQL.
# banking_app est le nom de la base de données à laquelle nous nous connectons.
spring.datasource.url=jdbc:mysql://localhost:3306/banking_app

# Nom d'utilisateur pour se connecter à la base de données MySQL
# 'root' est l'utilisateur par défaut, mais peut être différent en fonction de votre configuration.
spring.datasource.username=root

# Mot de passe pour l'utilisateur MySQL spécifié ci-dessus.
spring.datasource.password=password

# Classe du driver JDBC pour MySQL.
# com.mysql.cj.jdbc.Driver est le driver utilisé pour établir la connexion avec la base de données MySQL.
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuration de Hibernate pour la gestion du schéma de la base de données.
# 'update' permet à Hibernate de créer le schéma de la base de données si nécessaire et de mettre à jour le schéma existant sans supprimer les données.
# Autres options possibles : 'create' (crée la base de données à chaque démarrage), 'create-drop' (crée et supprime la base de données à l'arrêt), 'validate' (valide le schéma existant).
spring.jpa.hibernate.ddl-auto=update

# Affichage des requêtes SQL générées par Hibernate dans la console.
# Utile pour le débogage et la vérification des requêtes exécutées.
spring.jpa.show-sql=true

# Configuration du dialecte de Hibernate pour MySQL.
# Cela permet à Hibernate de générer les requêtes SQL spécifiques à MySQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

